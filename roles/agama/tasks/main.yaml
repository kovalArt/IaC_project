- name: Agama directory
  file:
    name: /opt/agama
    owner: root
    group: root
    state: directory
    recurse: true

- name: Configure AGAMA application
  template:
    src: agama.ini.j2
    dest: /opt/agama/agama.ini
    owner: root 
    mode: 0600
  no_log: true 

- name: Download agama.py
  get_url:
    url: https://raw.githubusercontent.com/hudolejev/agama/master/agama.py
    dest: /opt/agama
    mode: 0755

- name: Download Dockerfile
  get_url:
    url: https://raw.githubusercontent.com/hudolejev/agama/master/Dockerfile
    dest: /opt/agama/Dockerfile
    owner: root
    group: root
    mode: 0755

- name: Build agama image
  docker_image:
    name: agama
    build:
      path: /opt/agama
      network: host
    source: build   

#=== Create agama containers with loop. loop_control and loop_var are used to define the variable for the docker loop === 
- name: Create Agama Containers
  docker_container:
    name: "agama{{ item }}"
    image: agama
    env:
      AGAMA_DATABASE_URI: "mysql+pymysql://{{ mysql_user }}:{{ mysql_password }}@{{ mysql_host }}/{{ mysql_database }}"
    ports:
      - "{{ agama_start_port + (item - 1) }}:{{ agama_docker_port }}"
    restart_policy: always
  no_log: true
  loop: "{{ range(1, num_containers_per_machine|int + 1) }}"
  loop_control:
    loop_var: item
  

#=== Get the number of running containers with the name 'agama' on the hosts. Register the output ===
- name: Gather information about all running containers
  shell:
    cmd: "docker ps --format '{{ '{{.Names}}' }}' --filter 'status=running'"
  register: running_containers_info
  changed_when: "'agama' in running_containers_info.stdout_lines[-num_containers_per_machine|int:]"

#=== Remove extra containers if the number near agama container is bigger then in the variable
- name: Remove extra Agama Containers
  docker_container:
    name: "{{ item }}"
    state: absent
  loop: "{{ running_containers_info.stdout_lines }}"
  when: item | regex_replace('^agama', '') | int > num_containers_per_machine | int

#=== Create CNAMES on the Master Bind === 

- name: Create CNAME records for Agama instances 
  community.general.nsupdate:
    key_name: "nsupdate.key"
    server: "{{ groups['dns_primary'][0] }}"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ nsupdate_secret }}"
    zone: "{{ startup_name }}"
    state: present
    type: "CNAME"
    value: "{{ hostvars[groups['agama'][item]]['ansible_hostname'] }}"
    record: "www-{{ item + 1 }}"
  loop: "{{ range( groups['agama'] | length ) }}"
  no_log: true
