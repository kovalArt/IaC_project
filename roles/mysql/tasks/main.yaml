- name: Install mysql
  apt:
    name: mysql-server

- name: copy the mysql config file and restart mysql server
  template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
    mode: 0644
  notify: restart mysql

- name: Start mysql
  service:
    name: mysql
    state: started 
    enabled: true

- name: Install required Python Library
  apt:
    name: python3-pymysql  

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    
- name: MySQL user
  community.mysql.mysql_user:
    host: "%"
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present 
  no_log: yes

- name: Create MySQL exporter user
  mysql_user:
    name: "{{ mysql_prometheus_user }}"
    password: "{{ mysql_prometheus_pass }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Install Exporter 
  apt:
    name: prometheus-mysqld-exporter

- name: Update the MySQL exporter
  copy:
    src: ../files/mysql_exporter
    dest: /etc/default/prometheus-mysqld-exporter
  notify: restart mysql-exporter

- name: Copy the config file 
  template:
    dest: /var/lib/prometheus/.my.cnf
    src: my.cnf.j2
  no_log: yes
  notify: restart mysql-exporter

# ====== BACKUP ======

- name: Ensure that mysql directory exists 
  file:
    path: /home/backup/mysql
    state: directory 
    owner: backup 
    group: backup 
    mode: '0755'

- name: Create MySQL user named backup with required privileges
  mysql_user:
    name: backup
    password: "{{ mysql_backup_user_password }}" 
    priv: "agama.*:LOCK TABLES,SELECT"
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Ensure /home/backup/.my.cnf file is created
  template:
    src: backup_my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: '0600'

- name: Ensure user backup can create MySQL dumps without errors
  command: "sudo -u backup sh -c 'mysqldump agama >/dev/null; echo $?'"
  register: dump_result

- name: Fail if the dump command did not execute successfully
  fail:
    msg: "Error running mysqldump command. Check MySQL user privileges and .my.cnf configuration."
  when: dump_result.rc != 0

- name: Schedule MySQL dumps with Cron
  template:
    src: ../files/mysql_backup_cron.j2
    dest: /etc/cron.d/mysql_backup
    mode: "0644"
    owner: backup 
    group: backup


# ====== REPLICATION ======

- name: Create MySQL user named backup with required privileges
  mysql_user:
    name: "{{ mysql_replication_user }}"
    password: "{{ mysql_replica_user_password }}" 
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    state: present
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Read only mode for the Replica MySQL host
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Reset MySQL source
  community.mysql.mysql_replication:
    mode: "{{ item }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  loop:
    - stopreplica
    - resetprimary
  when: inventory_hostname == mysql_host

- name: Reset MySQL replica
  community.mysql.mysql_replication:
    mode: "{{ item }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    master_host: "kovalart-2"
    master_user: "{{ mysql_replication_user }}"
    master_password: "{{ mysql_replica_user_password }}"
  loop:
    - stopreplica
    - changeprimary
    - resetreplica
    - startreplica
  when: inventory_hostname != mysql_host

- name: Create CNAME records for MySQL instances
  community.general.nsupdate:
    key_name: "nsupdate.key"
    server: "{{ hostvars['kovalart-2']['ansible_default_ipv4']['address'] }}"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ nsupdate_secret }}"
    zone: "{{ startup_name }}"
    state: present
    type: "CNAME"
    value: "{{ item.target }}"
    record: "{{ item.service }}"
  loop:
    - { service: "mysql-1", target: "kovalart-1" }
    - { service: "mysql-2", target: "kovalart-2" }



